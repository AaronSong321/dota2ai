
--[[--------------------------------------
-- Level Ability and Talent
--------------------------------------

-- check skill build vs current level
if #AbilityToLevelUp > 26-npcBot:GetLevel() then
    for i=1, npcBot:GetLevel() do
		print("remove"..AbilityToLevelUp[1])
        table.remove(AbilityToLevelUp, 1)
    end
end

function ChooseTalent()
	local level=npcBot:GetLevel()
	for i,temp in pairs (AbilityToLevelUp)
	do
		if temp=="talent"
		then
			table.remove(AbilityToLevelUp,i)
			if level>=10 and level<15
			then
				table.insert(AbilityToLevelUp,i,Talents[1])
			end
			if level>=15 and level<20 
			then
				table.insert(AbilityToLevelUp,i,Talents[3])
			end
			if level>=20 and level<25
			then
				table.insert(AbilityToLevelUp,i,Talents[5])
			end
			if level>=25
			then
				table.insert(AbilityToLevelUp,i,Talents[7])
			end
		end
	end
	
	return
	
	--[[local talent=""
	if(npcBot:GetLevel()>=25)
	then
		talent=Talents[7]
		npcBot:ActionImmediate_LevelAbility(talent);
	end
	if(npcBot:GetLevel()>=20)
	then
		talent=Talents[5]
		npcBot:ActionImmediate_LevelAbility(talent);
	end
	if(npcBot:GetLevel()>=15)
	then
		talent=Talents[3]
		npcBot:ActionImmediate_LevelAbility(talent);
	end
	if(npcBot:GetLevel()>=10)
	then
		talent=Talents[1]
		npcBot:ActionImmediate_LevelAbility(talent);
	end
	return]]--
end]]--

--[[function ConsiderShrine()
	local Shrines={	SHRINE_BASE_1,
					SHRINE_BASE_2,
					SHRINE_BASE_3,
					SHRINE_BASE_4,
					SHRINE_BASE_5,
					SHRINE_JUNGLE_1,
					SHRINE_JUNGLE_2	}

	local npcBot=GetBot()
	
	if(npcBot:GetActiveMode() == BOT_MODE_RETREAT and npcBot.GoingToShrine==false and (npcBot:GetHealth()/npcBot:GetMaxHealth()<0.4 or npcBot:GetMaxHealth()-npcBot:GetHealth()>=600))
	then
		npcBot:ActionImmediate_Chat("shrine consider",true)		
		local TargetShrine
		local min_distance=10000
		for _,s in pairs(Shrines)
		do
			local shrine=GetShrine(GetTeam(),s)
			if(shrine~=nil)
			then
				if(GetShrineCooldown(shrine)<10 or IsShrineHealing(shrine)==true)
				then
					if(GetUnitToUnitDistance(npcBot,shrine)<min_distance)
					then
						TargetShrine=shrine
					end
				end
			end
		end
		if(min_distance<npcBot:DistanceFromFountain())
		then
			npcBot.Shrine=TargetShrine
			npcBot.GoingToShrine=true
			npcBot:ActionImmediate_Chat("I want to use Shrine,let's enjoy together! 我想要使用神泉，快来一起享用！",true)				
			for _,ally in pairs (GetUnitList(UNIT_LIST_ALLIED_HEROES ))
			do
				if((ally:GetHealth()/ally:GetMaxHealth()<0.7 or npcBot:GetMaxHealth()-npcBot:GetHealth()>=300 or ally:GetMana()/ally:GetMaxMana()<0.5) and GetUnitToUnitDistance(ally,npcBot.Shrine)<=6000)
				then
					ally.Shrine=TargetShrine
					ally.GoingToShrine=true
				end
			end
		end
	end
	
	if(npcBot.GoingToShrine==true and npcBot.Shrine~=nil)
	then
		if(GetUnitToUnitDistance(npcBot,npcBot.Shrine)<100 and GetShrineCooldown(npcBot.Shrine)<5)
		then
			local allys = npcBot:GetNearbyHeroes( 1600, false, BOT_MODE_NONE );
			local ready=true
			for _,ally in pairs(allys)
			do
				if(GetUnitToUnitDistance(ally,npcBot.Shrine)>500)
				then
					ready=false
				end
			end
			for _,ally in pairs (GetUnitList(UNIT_LIST_ALLIED_HEROES ))
			do
				if(IsPlayerBot(ally:GetPlayerID())==true)
				then
					if(ally.GoingToShrine==true and GetUnitToUnitDistance(ally,npcBot.Shrine)>500)
					then
						ready=false
					end
				end
			end
			
			if(ready==true)
			then
				npcBot:Action_UseShrine(npcBot.Shrine)
			else
				npcBot:Action_MoveToUnit(npcBot.Shrine)
			end
		else
			npcBot:Action_MoveToUnit(npcBot.Shrine)
		end
	else
		npcBot.GoingToShrine=false
		npcBot.Shrine=nil
	end
	
	if(IsShrineHealing(npcBot.Shrine)==true)
	then
		if(npcBot:NumQueuedActions()<=5)
		then
			npcBot:ActionQueue_MoveToUnit(npcBot.Shrine)
		end
	end
	
	if(npcBot.Shrine==nil or GetShrineCooldown(npcBot.Shrine)>10 or npcBot:GetHealth()/npcBot:GetMaxHealth()>0.6)
	then
		npcBot.GoingToShrine=false
		npcBot.Shrine=nil
	end
end
--------]]--

--[[function CourierUsageThink2()
	local npcBot=GetBot()
	local courier=GetCourier(0)
	if(courier==nil)
	then
		return
	end
	local allys=courier:GetNearbyHeroes( 600, false, BOT_MODE_NONE );
	local towers=courier:GetNearbyTowers(1000,true)
	if(towers==nil) then towers={} end
	
	local state=GetCourierState(courier)
	--[[if(npcBot:IsAlive()==false or npcBot:GetHealth()<=100)
	then
		return
	end]]--
	
	if(courier:WasRecentlyDamagedByAnyHero(2) or courier:WasRecentlyDamagedByTower(2) or #towers >=1)
	then
		if(courier:GetMaxHealth()==150)
		then
			npcBot:ActionImmediate_Courier(courier, COURIER_ACTION_BURST)
		end
		npcBot:ActionImmediate_Courier(courier, COURIER_ACTION_RETURN)
		return
	end
	
	if(npcBot:GetCourierValue()>=900 and courier:GetMaxHealth()==150)
	then
		npcBot:ActionImmediate_Courier(courier, COURIER_ACTION_BURST)
		return
	end
	--print(npcBot:GetUnitName().." "..npcBot:GetStashValue().." "..npcBot:GetCourierValue().." "..GetCourierState(courier))--or (state == COURIER_STATE_IDLE and #allys==0)
	if (npcBot:GetStashValue() >= 400 and state == COURIER_STATE_AT_BASE and courier:DistanceFromSecretShop()>=100 and courier:DistanceFromFountain()<=1000) 
	then
        npcBot:ActionImmediate_Courier(courier, COURIER_ACTION_TAKE_AND_TRANSFER_ITEMS)
        return
    end
	if((state == COURIER_STATE_AT_BASE or state == COURIER_STATE_IDLE ) and npcBot.secretShopMode == true)
	then
		npcBot:ActionImmediate_Courier(courier, COURIER_ACTION_SECRET_SHOP)
        return
	end
	if(state==COURIER_STATE_IDLE)
	then
		if(courier.idletime==nil)
		then
			courier.idletime=GameTime()
		else
			if(GameTime()-courier.idletime>10)
			then
				npcBot:ActionImmediate_Courier(courier, COURIER_ACTION_RETURN)
				courier.idletime=nil
				return
			end

		end
	end
end]]--

function UpdateLaneAssignments()
	local lanes=
	{
		[1]=LANE_MID,
		[2]=LANE_BOT,
		[3]=LANE_TOP,
		[4]=LANE_BOT,
		[5]=LANE_TOP,
	}
	--[[for i=1,5,1 do
		local bot=GetTeamMember(GetTeam(),i);
		if bot~=nil 
		then
			if bot:GetUnitName()=="npc_dota_hero_zuus"
			then
				lanes[i]=LANE_MID
			end
		end
	end]]--
	return lanes;
end

--[[function GetBotNames ()
	return  {"恒是传说","恒是强者","恒是新手","恒是菜鸡","恒是普通"}
end]]--



--[[ --BOT EXPERIMENT's code from http://steamcommunity.com/sharedfiles/filedetails/?id=837040016
function CanBuybackUpperRespawnTime( respawnTime )

	local npcBot = GetBot();

	if ( not npcBot:IsAlive() and respawnTime ~= nil and npcBot:GetRespawnTime() >= respawnTime
		and npcBot:GetBuybackCooldown() <= 0 and npcBot:GetGold() > npcBot:GetBuybackCost() ) then
		return true;
	end

	return false;

end
--BOT EXPERIMENT's code from http://steamcommunity.com/sharedfiles/filedetails/?id=837040016
function BuybackUsageThink()
	--[[local npcBot = GetBot();
	if npcBot:HasBuyback() then
		print(npcBot:GetUnitName());
	end
	if npcBot:IsAlive() or (not npcBot:HasBuyback()) then
		return;
	end
	if GetLaneFrontAmount(GetTeam(), LANE_TOP, false) < 0.2 or
		GetLaneFrontAmount(GetTeam(), LANE_MID, false) < 0.2 or
		GetLaneFrontAmount(GetTeam(), LANE_BOT, false) < 0.2 then
		npcBot:ActionImmediate_Buyback();
	end]]--
	
		
	local npcBot = GetBot();

	-- no buyback, no need to use GetUnitList() for performance considerations
	if ( npcBot:IsAlive() or (not npcBot:HasBuyback()) or npcBot:GetRespawnTime()<=15 ) then
		return;
	end

	local tower_top_3 = GetTower( GetTeam(), TOWER_TOP_3 );
	local tower_mid_3 = GetTower( GetTeam(), TOWER_MID_3 );
	local tower_bot_3 = GetTower( GetTeam(), TOWER_BOT_3 );
	local tower_base_1 = GetTower( GetTeam(), TOWER_BASE_1 );
	local tower_base_2 = GetTower( GetTeam(), TOWER_BASE_2 );

	local barracks_top_melee = GetBarracks( GetTeam(), BARRACKS_TOP_MELEE );
	local barracks_mid_melee = GetBarracks( GetTeam(), BARRACKS_MID_MELEE );
	local barracks_bot_melee = GetBarracks( GetTeam(), BARRACKS_BOT_MELEE );

	local ancient = GetAncient( GetTeam() );

	local buildList = {
		tower_top_3, tower_mid_3, tower_bot_3, tower_base_1, tower_base_2,
		barracks_top_melee, 
		barracks_mid_melee,
		barracks_bot_melee, 
		ancient
	};

	for _, build in pairs(buildList) do
		local tableNearbyEnemyHeroes = build:GetNearbyHeroes( 1600, true, BOT_MODE_NONE );
		local tableNearbyAllyHeroes = build:GetNearbyHeroes( 1600, false, BOT_MODE_NONE );

		if ( tableNearbyEnemyHeroes ~= nil and #tableNearbyEnemyHeroes >= #tableNearbyAllyHeroes ) then
			if ( build:GetHealth() / build:GetMaxHealth() < 0.5+ 1/math.max(build:TimeSinceDamagedByAnyHero(),5)*0.25 + 0.1*#tableNearbyEnemyHeroes and npcBot:GetRespawnTime()>=30 )then
				npcBot:ActionImmediate_Buyback();
				return;
			end
		end
	end

	if ( DotaTime() > 40 * 60 ) then
		npcBot:ActionImmediate_Buyback();
		return
	end
end ]]--

function ConsiderShrines()
	local npcBot=GetBot()
	
	if(npcBot:GetActiveMode() == BOT_MODE_ITEM)
	then
		return
	end
	
	local shrines=npcBot:GetNearbyShrines(1600,false)
	if(npcBot:GetAssignedLane()==LANE_MID)
	then
		sh1=GetShrine(GetTeam(),SHRINE_JUNGLE_1)
		sh2=GetShrine(GetTeam(),SHRINE_JUNGLE_2)
		if(GetShrineCooldown(sh1)==0)
		then
			table.insert(shrines,sh1)
		end
		if(GetShrineCooldown(sh2)==0)
		then
			table.insert(shrines,sh2)
		end
	end
	
	if(#shrines==0 or npcBot:IsUsingAbility() or npcBot:IsChanneling())
	then
		return
	end
	
	if(npcBot:GetActiveMode() == BOT_MODE_RETREAT and (npcBot:GetHealth()/npcBot:GetMaxHealth()<0.4 or npcBot:GetMaxHealth()-npcBot:GetHealth()>=600))
	then
		for _,s in pairs(shrines)
		do
			if(GetShrineCooldown(s)==0)
			then
				npcBot:Action_UseShrine(s)
				return
			end
		end
	end
	
	for _,s in pairs(shrines)
	do
		if(IsShrineHealing(s)==true and GetUnitToUnitDistance(npcBot,s)>=450)
		then
			npcBot:Action_MoveToLocation(s:GetLocation())
			return
		end
	end
	
end